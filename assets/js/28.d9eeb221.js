(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{212:function(a,t,r){"use strict";r.r(t);var v=r(0),e=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"热点速览"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#热点速览","aria-hidden":"true"}},[a._v("#")]),a._v(" 热点速览")]),a._v(" "),r("h2",{attrs:{id:"基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础","aria-hidden":"true"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),r("h3",{attrs:{id:"原型链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型链")]),a._v(" "),r("ul",[r("li",[a._v("JavaScript 常被描述为一种基于原型的语言 (prototype-based language)——每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。")]),a._v(" "),r("li",[a._v("定义一个a(),new a() 生成 b()，b() 的 "),r("strong",[a._v("proto")]),a._v(" 属性就是a.prototype. 当访问 b() 的一个属性, 浏览器首先查找 b() 是否有这个属性. 如果 b() 没有这个属性, 然后浏览器就会在 b() 的 "),r("strong",[a._v("proto")]),a._v(" 中查找这个属性(也就是 a.prototype). 如果 b() 的 "),r("strong",[a._v("proto")]),a._v(" 有这个属性, 那么 b() 的 "),r("strong",[a._v("proto")]),a._v(" 上的这个属性就会被使用. 否则, 浏览器就会去查找 b() 的 "),r("strong",[a._v("proto")]),a._v(" 的 "),r("strong",[a._v("proto")]),a._v(" ，看它是否有这个属性. 默认情况下, 所有函数的原型链的顶端 就是 window.Object.prototype. 如果它的上面都不存在这个属性，然后就得出这个属性是 undefined.")])]),a._v(" "),r("h3",{attrs:{id:"继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),r("p",[a._v("顾名思义，继承首先需要有父类")]),a._v(" "),r("h4",{attrs:{id:"原型链继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 原型链继承")]),a._v(" "),r("p",[a._v("实例B的原型等于实例A")]),a._v(" "),r("ul",[r("li",[a._v("实例C可继承的构造B、构造A、原型A的属性")]),a._v(" "),r("li",[a._v("继承单向/属性共享")])]),a._v(" "),r("h4",{attrs:{id:"构造函数继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构造函数继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 构造函数继承")]),a._v(" "),r("p",[a._v("用"),r("code",[a._v("call/apply")]),a._v("将父类构造函数引入子类（在子类函数中做了父类函数的自执行）")]),a._v(" "),r("ul",[r("li",[a._v("只继承父类构造函数的属性，无法继承父类原型属性")]),a._v(" "),r("li",[a._v("弥补了原型链继承的一些缺点")]),a._v(" "),r("li",[a._v("可以一对多的继承（"),r("code",[a._v("call")]),a._v("多个父类）")]),a._v(" "),r("li",[a._v("子实例可以向父实例传参")]),a._v(" "),r("li",[a._v("无法实现构造函数的复用/每个新的子实例都有父类构造函数的副本，数据臃肿")])]),a._v(" "),r("h3",{attrs:{id:"跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域","aria-hidden":"true"}},[a._v("#")]),a._v(" 跨域")]),a._v(" "),r("p",[a._v("域的限制：JavaScript/浏览器环境出于安全方面的考虑，不允许跨域名/端口调用其他页面的对象。")]),a._v(" "),r("h4",{attrs:{id:"jsonp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jsonp","aria-hidden":"true"}},[a._v("#")]),a._v(" JSONP")]),a._v(" "),r("p",[a._v("利用 "),r("code",[a._v("<script>")]),a._v(" 元素的开放策略，可以不受域的限制从其他获取 JSON 数据。")]),a._v(" "),r("h5",{attrs:{id:"优点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[a._v("#")]),a._v(" 优点")]),a._v(" "),r("ul",[r("li",[a._v("步骤简单")]),a._v(" "),r("li",[a._v("兼容性好")]),a._v(" "),r("li",[a._v("符合视图层与逻辑层分离的思想")])]),a._v(" "),r("h5",{attrs:{id:"缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缺点","aria-hidden":"true"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),r("ul",[r("li",[a._v("只支持GET方式")]),a._v(" "),r("li",[a._v("失败时无法返回状态码")]),a._v(" "),r("li",[a._v("被劫持的风险高")])]),a._v(" "),r("h4",{attrs:{id:"cors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cors","aria-hidden":"true"}},[a._v("#")]),a._v(" CORS")]),a._v(" "),r("p",[a._v("服务器允许，浏览器支持即可")]),a._v(" "),r("h4",{attrs:{id:"反向代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#反向代理","aria-hidden":"true"}},[a._v("#")]),a._v(" 反向代理")]),a._v(" "),r("p",[a._v("开发环境配置，且步骤稍复杂")]),a._v(" "),r("h3",{attrs:{id:"url编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#url编码","aria-hidden":"true"}},[a._v("#")]),a._v(" URL编码")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("encodeURI")]),a._v(" 编码整条URL（!#$&'(),;=?~）不编码")]),a._v(" "),r("li",[r("code",[a._v("encodeURIComponent")]),a._v(" 编码某一段URL （!'()*-._~）不编码")])]),a._v(" "),r("h3",{attrs:{id:"闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[a._v("#")]),a._v(" 闭包")]),a._v(" "),r("p",[a._v("闭包的实质是因为函数嵌套而形成的作用域。即函数A内部有一个函数B，函数B可以访问A中的变量，B就是一个闭包。")]),a._v(" "),r("h3",{attrs:{id:"bfc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bfc","aria-hidden":"true"}},[a._v("#")]),a._v(" BFC")]),a._v(" "),r("p",[r("code",[a._v("positon:absolute/fixed")]),a._v(" / "),r("code",[a._v("display:inline-block/table")]),a._v(" / "),r("code",[a._v("float:left/right")]),a._v(" / "),r("code",[a._v("overflow!=visiblle")])]),a._v(" "),r("h3",{attrs:{id:"网页渲染的流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#网页渲染的流程","aria-hidden":"true"}},[a._v("#")]),a._v(" 网页渲染的流程")]),a._v(" "),r("p",[a._v("DomTree > CSSomTree > renderTree")]),a._v(" "),r("h3",{attrs:{id:"纯函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#纯函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 纯函数")]),a._v(" "),r("p",[a._v("如果函数的调用参数完全相同，则永远返回相同的结果。它不依赖程序执行期间的函数外部的任何状态，不产生任何可观察的副作用（状态交互），便于测试和重构。")]),a._v(" "),r("h3",{attrs:{id:"tcp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp","aria-hidden":"true"}},[a._v("#")]),a._v(" TCP")]),a._v(" "),r("h4",{attrs:{id:"三次握手"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三次握手","aria-hidden":"true"}},[a._v("#")]),a._v(" 三次握手")]),a._v(" "),r("p",[a._v("客户端与服务器建立建立TCP链接时的通信协议")]),a._v(" "),r("ul",[r("li",[a._v("客户端发送"),r("code",[a._v("SYN")]),a._v("请求（能听到我说话吗？）")]),a._v(" "),r("li",[a._v("服务器收到"),r("code",[a._v("SYN")]),a._v("请求包，确认后发出自身的"),r("code",[a._v("SYN+ACK")]),a._v("请求包（听到了，你能听到我说话吗？）")]),a._v(" "),r("li",[a._v("客户端收到"),r("code",[a._v("SYN+ACK")]),a._v("请求包，确认后发出"),r("code",[a._v("ACK")]),a._v("包，进入链接状态（好的，那我们开始聊天吧）")])]),a._v(" "),r("h4",{attrs:{id:"四次挥手"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手","aria-hidden":"true"}},[a._v("#")]),a._v(" 四次挥手")]),a._v(" "),r("p",[a._v("客户端与服务器断开TCP链接时的操作")]),a._v(" "),r("ul",[r("li",[a._v("客户端发送一个请求断开的包（我挂了）")]),a._v(" "),r("li",[a._v("服务端返回一个同意断开的包（好的）")]),a._v(" "),r("li",[a._v("服务端发送一个请求断开的包（我也挂了）")]),a._v(" "),r("li",[a._v("客户端发送一个确认断开的包（好的）")])]),a._v(" "),r("h3",{attrs:{id:"深拷贝"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝","aria-hidden":"true"}},[a._v("#")]),a._v(" 深拷贝")]),a._v(" "),r("p",[a._v("深拷贝是指源对象和拷贝对象相互独立，其中任何一个发生变化都不会对对方产生影响。深浅拷贝最根本的区别就是是否真正获取到一个对象的复制实体，而不是引用。深拷贝在内存中新建了复制体的存储，而浅拷贝只是引用了源头的内存地址。")]),a._v(" "),r("ul",[r("li",[a._v("使用JSON "),r("code",[a._v("b=JSON.parse(JSON.sringify(a))")])]),a._v(" "),r("li",[a._v("递归遍历属性")])]),a._v(" "),r("h3",{attrs:{id:"数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据类型","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),r("ul",[r("li",[a._v("基本："),r("code",[a._v("undefined")]),a._v(" "),r("code",[a._v("null")]),a._v(" "),r("code",[a._v("string")]),a._v(" "),r("code",[a._v("number")]),a._v(" "),r("code",[a._v("boolean")])]),a._v(" "),r("li",[a._v("引用："),r("code",[a._v("object")]),a._v(" "),r("code",[a._v("array")]),a._v(" "),r("code",[a._v("function")])])]),a._v(" "),r("h2",{attrs:{id:"书籍推荐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#书籍推荐","aria-hidden":"true"}},[a._v("#")]),a._v(" 书籍推荐")]),a._v(" "),r("h3",{attrs:{id:"html与css进阶指南"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#html与css进阶指南","aria-hidden":"true"}},[a._v("#")]),a._v(" HTML与CSS进阶指南")]),a._v(" "),r("p",[a._v("这本书对前端知识点的讲解深入浅出，读的时候经常有茅塞顿开的感觉。特别是刚入门的那个阶段，很多困扰和很长时间的纠结点都一扫而空，读完感觉自己就没那么菜了。")]),a._v(" "),r("h3",{attrs:{id:"javascript高级程序设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript高级程序设计","aria-hidden":"true"}},[a._v("#")]),a._v(" JavaScript高级程序设计")]),a._v(" "),r("p",[a._v("这本书可以说是前端领域的必读书目了吧。但是我建议不要从头到位那样读，因为知识点都比较深，从头到尾看一遍会非常痛苦。可以把它当成工具书，当项目经验积累到一定程度在去看那那些拿不稳的点。")]),a._v(" "),r("h3",{attrs:{id:"你不知道的javascript"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#你不知道的javascript","aria-hidden":"true"}},[a._v("#")]),a._v(" 你不知道的JavaScript")]),a._v(" "),r("p",[a._v("这套书看了好久，到现在还没看完。以前经常听人说JS是一种很简单的弱类型脚本语言/玩具语言。但是读这套书的时候我觉得JS一点也不简单，而且越来越觉得JS是世界上最好的语言，集大成之作。")]),a._v(" "),r("h3",{attrs:{id:"黑客与画家"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#黑客与画家","aria-hidden":"true"}},[a._v("#")]),a._v(" 黑客与画家")]),a._v(" "),r("p",[a._v("这是一本非常有趣的书，里面有很多观点很奇怪，但是非常符合我的口味。例如我喜欢编程的同时也非常喜欢画画，而这本书的作者也告诉我，编程和画画没有本质上的区别。")]),a._v(" "),r("h2",{attrs:{id:"框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#框架","aria-hidden":"true"}},[a._v("#")]),a._v(" 框架")]),a._v(" "),r("h3",{attrs:{id:"react"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react","aria-hidden":"true"}},[a._v("#")]),a._v(" React")]),a._v(" "),r("h4",{attrs:{id:"表单控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#表单控制","aria-hidden":"true"}},[a._v("#")]),a._v(" 表单控制")]),a._v(" "),r("ul",[r("li",[a._v("受控组件：react 通过在表单元素上绑定value值，通过 onchange处理函数 setState 的方式控制表单元素的value")]),a._v(" "),r("li",[a._v("非受控组件：表单组件自己保存value状态，react通过ref获取节点，来进行value的控制")])]),a._v(" "),r("h4",{attrs:{id:"无状态组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#无状态组件","aria-hidden":"true"}},[a._v("#")]),a._v(" 无状态组件")]),a._v(" "),r("p",[a._v("无状态组件就是一个单纯的render函数")]),a._v(" "),r("ul",[r("li",[a._v("通过减少继承Component而来的生命周期函数而达到性能优化的效果。")]),a._v(" "),r("li",[a._v("因为没有shouldComponentUpdate生命周期函数，所以每次state更新，它都会重新绘制render函数。")])]),a._v(" "),r("h4",{attrs:{id:"diff"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#diff","aria-hidden":"true"}},[a._v("#")]),a._v(" diff")]),a._v(" "),r("p",[a._v("比较文本差异的算法")]),a._v(" "),r("ul",[r("li",[a._v("比较两个树形数据结构的差异时，传统diff算法是循环递归每一个节点，复杂度达到O(n^3)")]),a._v(" "),r("li",[a._v("React/Vue 只进行同层级比较，忽略跨级操作，将复杂度降低为O(n)。开发过程中列表渲染时设置的key值就是分配给同一层级的一组子节点，作为唯一id进行区分")])]),a._v(" "),r("h4",{attrs:{id:"高阶组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件","aria-hidden":"true"}},[a._v("#")]),a._v(" 高阶组件")]),a._v(" "),r("ul",[r("li",[a._v("高阶组件是参数为组件，返回值为新组件的函数，是 React 中用于复用组件逻辑的一种设计模式")]),a._v(" "),r("li",[a._v("装饰器是高阶组件的一种应用方式")])]),a._v(" "),r("h4",{attrs:{id:"vue-对比-react"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue-对比-react","aria-hidden":"true"}},[a._v("#")]),a._v(" Vue 对比 React")]),a._v(" "),r("h5",{attrs:{id:"相同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#相同","aria-hidden":"true"}},[a._v("#")]),a._v(" 相同")]),a._v(" "),r("ul",[r("li",[a._v("都采用性能更高的虚拟Dom")]),a._v(" "),r("li",[a._v("都支持响应式和组件化")]),a._v(" "),r("li",[a._v("都主要维护核心库，将其他功能如状态管理/路由等交给配套组件完成")])]),a._v(" "),r("h5",{attrs:{id:"差异"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#差异","aria-hidden":"true"}},[a._v("#")]),a._v(" 差异")]),a._v(" "),r("ul",[r("li",[a._v("React具有更加强大的社区生态")]),a._v(" "),r("li",[a._v("React对TS支持更高")]),a._v(" "),r("li",[a._v("Vue的组件优化更容易，组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重渲染。")]),a._v(" "),r("li",[a._v("vue更接近传统的前端开发方式，模版/样式/逻辑代码结构更清晰，React主张用jsx表示一切，这赋予了React更高的灵活性，但是在某些情况下代码可读性不如Vue。")]),a._v(" "),r("li",[a._v("vue中的样式设置更加灵活，scope实现起来更加渐变")]),a._v(" "),r("li",[a._v("Vue的指令更加丰富，使用成本更低，但是增加了学习成本")]),a._v(" "),r("li",[a._v("React具备更加完善的原生渲染能力和更好的生态支持")]),a._v(" "),r("li",[a._v("两者相互借鉴，互相补充。如Mobx 实际上使用体验更接近vue，vue也可以支持jsx语法等等方面可以体现")])]),a._v(" "),r("h3",{attrs:{id:"vue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue","aria-hidden":"true"}},[a._v("#")]),a._v(" Vue")])])}),[],!1,null,null,null);t.default=e.exports}}]);