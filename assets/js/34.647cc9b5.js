(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{208:function(t,a,e){"use strict";e.r(a);var r=e(0),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"项目经历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目经历","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目经历")]),t._v(" "),e("h2",{attrs:{id:"小游戏-决战大明宫（策略类实时对战-独立开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小游戏-决战大明宫（策略类实时对战-独立开发","aria-hidden":"true"}},[t._v("#")]),t._v(" 小游戏-决战大明宫（策略类实时对战-独立开发")]),t._v(" "),e("h3",{attrs:{id:"项目描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目描述","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目描述")]),t._v(" "),e("p",[t._v("策略类实时对战小游戏。前期使用css3结合Canvas进行混合技术开发。后期内容增加后，选择使用游戏引擎cocos2D进行重构。在原生开发经验的加持下，使用游戏引擎的体验非常顺畅。")]),t._v(" "),e("h3",{attrs:{id:"项目职责"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目职责","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目职责")]),t._v(" "),e("ul",[e("li",[t._v("验证和总结出css+canvas混合开发游戏的方案")]),t._v(" "),e("li",[t._v("原生JS实现碰撞检测、手势拖拽、粒子动画、帧动画控制等游戏相关算法")]),t._v(" "),e("li",[t._v("调研游戏引擎环境，掌握Cocos2d的开发流程和优化")]),t._v(" "),e("li",[t._v("掌握通过WebSocket与服务器建立实时通信连接的技术方案")])]),t._v(" "),e("h3",{attrs:{id:"技术亮点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#技术亮点","aria-hidden":"true"}},[t._v("#")]),t._v(" 技术亮点")]),t._v(" "),e("ul",[e("li",[t._v("触摸交互逻辑：返回触摸点的位置上对应的Dom节点。"),e("code",[t._v("offsetParent")]),t._v(" & "),e("code",[t._v("getBoundingClientRect")]),t._v(" & "),e("code",[t._v("ElementFromPoint")]),t._v(" 整合兼容方案")]),t._v(" "),e("li",[t._v("静态资源预加载逻辑。"),e("code",[t._v("Promise")]),t._v(" & "),e("code",[t._v("new Image()")])]),t._v(" "),e("li",[t._v("对象池。每次优先调用对象池中的元素，没有闲置对象时再创建新的元素。使用完毕的元素立即存入对象池。实现对象池的容量在满足交互峰值的前提下最小。")]),t._v(" "),e("li",[t._v("音频处理。音效的重叠播放和音频元素的内存泄露问题。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);